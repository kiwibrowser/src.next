// Copyright 2012 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include "extensions/common/constants.h"

#include <string_view>

#include "base/containers/contains.h"
#include "base/containers/fixed_flat_set.h"
#include "build/build_config.h"
#include "build/chromecast_buildflags.h"
#include "build/chromeos_buildflags.h"

namespace extensions {

const uint8_t kWebstoreSignaturesPublicKey[] = {
    0x30, 0x82, 0x01, 0x22, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86,
    0xf7, 0x0d, 0x01, 0x01, 0x01, 0x05, 0x00, 0x03, 0x82, 0x01, 0x0f, 0x00,
    0x30, 0x82, 0x01, 0x0a, 0x02, 0x82, 0x01, 0x01, 0x00, 0x8f, 0xfb, 0xbf,
    0x5c, 0x37, 0x63, 0x94, 0x3c, 0xb0, 0xee, 0x01, 0xc4, 0xb5, 0xa6, 0x9a,
    0xb1, 0x9f, 0x46, 0x74, 0x6f, 0x16, 0x38, 0xa0, 0x32, 0x27, 0x35, 0xdd,
    0xf0, 0x71, 0x6b, 0x0e, 0xdc, 0xf6, 0x25, 0xcb, 0xb2, 0xed, 0xea, 0xfb,
    0x32, 0xd5, 0xaf, 0x1e, 0x03, 0x43, 0x03, 0x46, 0xf0, 0xa7, 0x39, 0xdb,
    0x23, 0x96, 0x1d, 0x65, 0xe5, 0x78, 0x51, 0xf0, 0x84, 0xb0, 0x0e, 0x12,
    0xac, 0x0e, 0x5b, 0xdc, 0xc9, 0xd6, 0x4c, 0x7c, 0x00, 0xd5, 0xb8, 0x1b,
    0x88, 0x33, 0x3e, 0x2f, 0xda, 0xeb, 0xaa, 0xf7, 0x1a, 0x75, 0xc2, 0xae,
    0x3a, 0x54, 0xde, 0x37, 0x8f, 0x10, 0xd2, 0x28, 0xe6, 0x84, 0x79, 0x4d,
    0x15, 0xb4, 0xf3, 0xbd, 0x3f, 0x56, 0xd3, 0x3c, 0x3f, 0x18, 0xab, 0xfc,
    0x2e, 0x05, 0xc0, 0x1e, 0x08, 0x31, 0xb6, 0x61, 0xd0, 0xfd, 0x9f, 0x4f,
    0x3f, 0x64, 0x0d, 0x17, 0x93, 0xbc, 0xad, 0x41, 0xc7, 0x48, 0xbe, 0x00,
    0x27, 0xa8, 0x4d, 0x70, 0x42, 0x92, 0x05, 0x54, 0xa6, 0x6d, 0xb8, 0xde,
    0x56, 0x6e, 0x20, 0x49, 0x70, 0xee, 0x10, 0x3e, 0x6b, 0xd2, 0x7c, 0x31,
    0xbd, 0x1b, 0x6e, 0xa4, 0x3c, 0x46, 0x62, 0x9f, 0x08, 0x66, 0x93, 0xf9,
    0x2a, 0x51, 0x31, 0xa8, 0xdb, 0xb5, 0x9d, 0xb9, 0x0f, 0x73, 0xe8, 0xa0,
    0x09, 0x32, 0x01, 0xe9, 0x7b, 0x2a, 0x8a, 0x36, 0xa0, 0xcf, 0x17, 0xb0,
    0x50, 0x70, 0x9d, 0xa2, 0xf9, 0xa4, 0x6f, 0x62, 0x4d, 0xb6, 0xc9, 0x31,
    0xfc, 0xf3, 0x08, 0x12, 0xff, 0x93, 0xbd, 0x62, 0x31, 0xd8, 0x1c, 0xea,
    0x1a, 0x9e, 0xf5, 0x81, 0x28, 0x7f, 0x75, 0x5e, 0xd2, 0x27, 0x7a, 0xc2,
    0x96, 0xf5, 0x9d, 0xdb, 0x18, 0xfc, 0x76, 0xdc, 0x46, 0xf0, 0x57, 0xc0,
    0x58, 0x34, 0xc8, 0x22, 0x2d, 0x2a, 0x65, 0x75, 0xa7, 0xd9, 0x08, 0x62,
    0xcd, 0x02, 0x03, 0x01, 0x00, 0x01};

const size_t kWebstoreSignaturesPublicKeySize =
    std::size(kWebstoreSignaturesPublicKey);

}  // namespace extensions

namespace extension_misc {

#if BUILDFLAG(IS_CHROMEOS)
// TODO(michaelpg): Deprecate old app IDs before adding new ones to avoid bloat.
constexpr char kStagingAttractLoopAppId[] = "aefaeciooibphdopnjjmgjdlckdcfbae";
constexpr char kStagingHighlightsAppId[] = "glochkamldfopmdlegmcnjmgkopfiplb";

// Specialized demo apps for blazey devices
constexpr char kBlazeyAttractLoopAppId[] = "lceekekmpiieklnpocjfahfakahjkhha";
constexpr char kBlazeyHighlightsAppId[] = "jbpnmbcpgemgfblnjfhnmlffhkofekmf";

bool IsDemoModeChromeApp(std::string_view extension_id) {
  constexpr auto kDemoModeApps = base::MakeFixedFlatSet<std::string_view>({
      // clang-format off
      kHighlightsAppId,
      kScreensaverAppId,
      kStagingAttractLoopAppId,
      kStagingHighlightsAppId,
      kNewAttractLoopAppId,
      kNewHighlightsAppId,
      kBlazeyAttractLoopAppId,
      kBlazeyHighlightsAppId
      // clang-format on
  });
  return base::Contains(kDemoModeApps, extension_id);
}
#endif  // BUILDFLAG(IS_CHROMEOS)

#if BUILDFLAG(IS_CHROMEOS_ASH)

bool IsSystemUIApp(std::string_view extension_id) {
  constexpr auto kApps = base::MakeFixedFlatSet<std::string_view>({
      // clang-format off
      kChromeVoxExtensionId,
      kFilesManagerAppId,
      kHighlightsAppId,
      kScreensaverAppId,
      // clang-format on
  });
  return base::Contains(kApps, extension_id);
}

#endif  // BUILDFLAG(IS_CHROMEOS_ASH)

bool IsQuickOfficeExtension(std::string_view extension_id) {
  constexpr auto kQuickOfficeIds = base::MakeFixedFlatSet<std::string_view>({
      // clang-format off
      kQuickOfficeComponentExtensionId,
      kQuickOfficeInternalExtensionId,
      kQuickOfficeExtensionId,
      // clang-format on
  });
  return base::Contains(kQuickOfficeIds, extension_id);
}

// TODO(https://crbug.com/1257275): remove after default app migration is done.
bool IsPreinstalledAppId(std::string_view app_id) {
  constexpr auto kPreinstalledApps = base::MakeFixedFlatSet<std::string_view>({
      // clang-format off
      kGmailAppId,
      kGoogleDocsAppId,
      kGoogleDriveAppId,
      kGoogleSheetsAppId,
      kGoogleSlidesAppId,
      kYoutubeAppId,
      // clang-format on
  });
  return base::Contains(kPreinstalledApps, app_id);
}

}  // namespace extension_misc
